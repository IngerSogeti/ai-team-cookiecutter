{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-only': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}

# --------- PDM -------------

[project]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}."
dynamic = ["version"]
authors = [
    {name = "{{ cookiecutter.full_name.replace('\"', '\\\"') }}", email = "{{ cookiecutter.email }}"},
]
readme = "README.md"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    "Programming Language :: Python :: 3.10",
]
{%- if cookiecutter.open_source_license in license_classifiers %}
license =  {text = "{{ cookiecutter.open_source_license }}"}
{%- endif %}
requires-python = ">=3.9"
dependencies = [
{% if cookiecutter.command_line_interface == "click" %}
    "click>=8.1.3",
{%- endif %}
]

[project.urls]
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/issues"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
documentation = "https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.project_slug }}"

{% if cookiecutter.command_line_interface|lower == 'click' -%}
[project.scripts]
{{cookiecutter.pkg_name}} = '{{ cookiecutter.pkg_name }}.cli:main'
{%- endif %}


[project.optional-dependencies]
[tool.pdm]
version = {from = "{{cookiecutter.pkg_name}}/__init__.py"}
package-dir = "{{cookiecutter.pkg_name}}"
source-includes = ["tests/"]
allow_prereleases = true

[tool.pdm.build]
editable-backend = "path"

[tool.pdm.dev-dependencies]
lint = [
    "yamllint>=1.27.1",
    "flake8>=5.0.4",
    "flake8-docstrings>=1.6.0",
    {%- if cookiecutter.flake8 == 'extensive' %}
    "flake8-aaa>=0.12.2",
    "flake8-annotations>=2.9.1",
    "flake8-annotations-complexity>=0.0.7",
    "flake8-typing-imports>=0.12.0,!=1.13.0",
    "flake8-bugbear>=22.8.23",
    "flake8-debugger>=4.1.2",
    "flake8-fixme>=1.1.1",
    "flake8-markdown>=0.3.0",
    "flake8-mutable>=1.2.0",
    "flake8-pytest>=1.4",
    "flake8-pytest-style>=1.6.0",
    "flake8-simplify>=0.19.3",
    "flake8-variables-names>=0.0.5",
    "flake8-comprehensions>=3.10.0",
    "flake8-expression-complexity>=0.0.11",
    "flake8-use-fstring>=1.4",
    "flake8-eradicate>=1.3.0"
    {%- endif %}
    "pep8-naming>=0.13.2",
    "dlint>=0.13.0",
    "pylint>=2.15.2",
]
test = [
    "pytest>=7.1.3",
    "pytest-cov>=3.0.0",
    "pytest-xdist>=3.0.2",
    "pytest-freezegun>=0.4.2",
    "pydantic-factories>=1.6.1",
]
doc = [
    "mkdocs>=1.3.1",
    "mkdocs-git-revision-date-localized-plugin>=1.1.0",
    "mkdocs-htmlproofer-plugin>=0.8.0",
    "mkdocs-minify-plugin>=0.5.0",
    "mkdocs-autolinks-plugin>=0.6.0",
    "mkdocs-material>=8.4.2",
    "mkdocs-include-markdown-plugin>=2.8.0",
    "mkdocstrings[python]>=0.18",
    "markdown-include>=0.7.0",
    "mkdocs-section-index>=0.3.4",
]
security = [
    "safety>=2.3.1",
    "bandit>=1.7.3",
]
fixers = [
    "black>=22.8.0",
    "isort>=5.10.1",
    "yamlfix>=1.0.1",
]
typing = [
{%- if cookiecutter.use_mypy == 'True' %}
    "mypy>=0.971",
    "types-requests>=2.28.11.7",
{%- endif %}
]
dev = [
    "pre-commit>=2.20.0",
    "twine>=4.0.1",
]
{%- if cookiecutter.use_bump2version == 'True' %}
version = [
    "bump2version>=1.0.1"
]
{%- endif %}

[build-system]
build-backend = "pdm.pep517.api"
requires = ["pdm-pep517>=1.0.0"]

# --------- Black -------------

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py36', 'py37', 'py38', 'py39', 'py310']
extend-exclude = "./notebooks"
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# --------- Pytest -------------

[tool.pytest.ini_options]
addopts = "--strict-markers"
testpaths = ["tests"]
norecursedirs = [
    ".tox",
    ".git",
    "*/migrations/*",
    "*/static/*",
    "docs",
    "venv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "secondary: mark tests that use functionality tested in the same file (deselect with '-m \"not secondary\"')"
]
filterwarnings = [
  "error",
  # Until https://github.com/ktosiek/pytest-freezegun/issues/35 is merged
  "ignore::DeprecationWarning:pytest_freezegun.*",
]

# --------- Isort -------------

[tool.isort]
profile = "black"
src_paths = ["{{ cookiecutter.pkg_name }}", "test"]

# --------- Pylint -------------
[tool.pylint.'TYPECHECK']
generated-members = "sh"

[tool.pylint.'MESSAGES CONTROL']
extension-pkg-whitelist = "pydantic"

{%- if cookiecutter.use_mypy == 'True' %}
# --------- Mypy -------------

[tool.mypy]
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = false
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_defs = true
plugins = [
  "pydantic.mypy"
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = "tests.*"
# Required to not have  error: Untyped decorator makes function on fixtures and
# parametrize decorators
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "goodconf",
    "pytest",
]
ignore_missing_imports = true
{%- endif %}
